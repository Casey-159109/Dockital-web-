{"ast":null,"code":"import axios from \"axios\";\nvar FormData = require('form-data');\nvar data = new FormData();\n// https://docs.pinata.cloud/pinata-api/authentication\n\n/*\n1 - CREATE AN ACCOUNT\n2 - CREATE AN API_KEY\n3 - AUTHENTICATE \n4 - CONNECT TO THE PINATA API\n5 - PINNING : https://docs.pinata.cloud/pinata-api/pinning\n*/\n\nvar config = {\n  method: 'get',\n  url: 'https://api.pinata.cloud/data/testAuthentication',\n  headers: {\n    'Authorization': 'Bearer ' + process.env.REACT_APP_PINATA_SECRET_ACCESS_TOKEN\n  }\n};\nvar pinFile = {\n  method: 'post',\n  url: 'https://api.pinata.cloud/pinning/pinFileToIPFS',\n  data: data,\n  headers: {\n    pinata_api_key: process.env.REACT_APP_PINATA_API_KEY,\n    pinata_secret_api_key: process.env.REACT_APP_PINATA_SECRET_API_KEY\n  }\n};\nexport async function connect() {\n  try {\n    const res = await axios(config);\n    console.log(res.data);\n  } catch (e) {\n    console.error(e);\n  }\n}\nexport function uploadFileToIPFS(value, callback) {\n  data.append('file', value.file);\n  data.append('pinataOptions', '{\"cidVersion\": 1}');\n  data.append('pinataMetadata', `{\"name\": \"${value.file.name}\", \"keyvalues\": {\"company\": \"Pinata\"}}`);\n  axios(pinFile).then(callback).catch(console.error);\n}","map":{"version":3,"names":["axios","FormData","require","data","config","method","url","headers","process","env","REACT_APP_PINATA_SECRET_ACCESS_TOKEN","pinFile","pinata_api_key","REACT_APP_PINATA_API_KEY","pinata_secret_api_key","REACT_APP_PINATA_SECRET_API_KEY","connect","res","console","log","e","error","uploadFileToIPFS","value","callback","append","file","name","then","catch"],"sources":["/Users/ujjwalsrivastava/Downloads/final-2/client/src/lib/ipfs.js"],"sourcesContent":["import axios from \"axios\";\nvar FormData = require('form-data');\nvar data = new FormData();\n// https://docs.pinata.cloud/pinata-api/authentication\n\n/*\n1 - CREATE AN ACCOUNT\n2 - CREATE AN API_KEY\n3 - AUTHENTICATE \n4 - CONNECT TO THE PINATA API\n5 - PINNING : https://docs.pinata.cloud/pinata-api/pinning\n*/\n\n\nvar config = {\n  method: 'get',\n  url: 'https://api.pinata.cloud/data/testAuthentication',\n  headers: { \n    'Authorization': 'Bearer ' + process.env.REACT_APP_PINATA_SECRET_ACCESS_TOKEN\n  }\n};\n\nvar pinFile = {\n    method: 'post',\n    url: 'https://api.pinata.cloud/pinning/pinFileToIPFS',\n    data: data,\n    headers: { \n        pinata_api_key: process.env.REACT_APP_PINATA_API_KEY, \n        pinata_secret_api_key : process.env.REACT_APP_PINATA_SECRET_API_KEY, \n    }\n  };\n\nexport async function connect() {\n    try {\n        const res = await axios(config)\n        console.log(res.data);\n    } catch (e) {\n        console.error(e)\n    }\n}\n\nexport function uploadFileToIPFS(value, callback) {\n    data.append('file', value.file);\n    data.append('pinataOptions', '{\"cidVersion\": 1}');\n    data.append('pinataMetadata', `{\"name\": \"${value.file.name}\", \"keyvalues\": {\"company\": \"Pinata\"}}`)\n  \n    axios(pinFile)\n    .then(callback)\n    .catch(console.error)\n\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,IAAIC,QAAQ,GAAGC,OAAO,CAAC,WAAW,CAAC;AACnC,IAAIC,IAAI,GAAG,IAAIF,QAAQ,CAAC,CAAC;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,IAAIG,MAAM,GAAG;EACXC,MAAM,EAAE,KAAK;EACbC,GAAG,EAAE,kDAAkD;EACvDC,OAAO,EAAE;IACP,eAAe,EAAE,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC;EAC3C;AACF,CAAC;AAED,IAAIC,OAAO,GAAG;EACVN,MAAM,EAAE,MAAM;EACdC,GAAG,EAAE,gDAAgD;EACrDH,IAAI,EAAEA,IAAI;EACVI,OAAO,EAAE;IACLK,cAAc,EAAEJ,OAAO,CAACC,GAAG,CAACI,wBAAwB;IACpDC,qBAAqB,EAAGN,OAAO,CAACC,GAAG,CAACM;EACxC;AACF,CAAC;AAEH,OAAO,eAAeC,OAAOA,CAAA,EAAG;EAC5B,IAAI;IACA,MAAMC,GAAG,GAAG,MAAMjB,KAAK,CAACI,MAAM,CAAC;IAC/Bc,OAAO,CAACC,GAAG,CAACF,GAAG,CAACd,IAAI,CAAC;EACzB,CAAC,CAAC,OAAOiB,CAAC,EAAE;IACRF,OAAO,CAACG,KAAK,CAACD,CAAC,CAAC;EACpB;AACJ;AAEA,OAAO,SAASE,gBAAgBA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAC9CrB,IAAI,CAACsB,MAAM,CAAC,MAAM,EAAEF,KAAK,CAACG,IAAI,CAAC;EAC/BvB,IAAI,CAACsB,MAAM,CAAC,eAAe,EAAE,mBAAmB,CAAC;EACjDtB,IAAI,CAACsB,MAAM,CAAC,gBAAgB,EAAG,aAAYF,KAAK,CAACG,IAAI,CAACC,IAAK,wCAAuC,CAAC;EAEnG3B,KAAK,CAACW,OAAO,CAAC,CACbiB,IAAI,CAACJ,QAAQ,CAAC,CACdK,KAAK,CAACX,OAAO,CAACG,KAAK,CAAC;AAEzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}